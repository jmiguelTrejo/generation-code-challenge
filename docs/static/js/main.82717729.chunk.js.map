{"version":3,"sources":["hooks/useFetch.js","map/components/MarkerWrapper.js","map/components/CustomMap.js","map/components/FavItem.js","map/components/FavList.js","YourComponent.js","App.js","registerServiceWorker.js","index.js"],"names":["useFetch","url","cache","isMounted","useRef","useEffect","current","useState","data","loading","error","state","setState","a","foundCache","cacheUrl","window","localStorage","getItem","urlArray","JSON","parse","resp","find","key","fetch","response","json","obj","push","setItem","stringify","console","log","fetchData","MarkerWrapper","memo","marker","handleClick","center","lat","lng","googleKey","encodeURI","Address","status","location","results","geometry","title","Name","position","onClick","e","CustomMap","addFavorite","markerList","mapStyle","height","width","apiKey","texto","latLng","googleMapsApiKey","mapContainerStyle","zoom","map","FavItem","item","removeFavorite","className","icon","faTrash","FavList","favorites","toggleListFavorite","css","fav","YourComponent","openFavorites","animateFav","renderFavList","toasterText","toasterClass","favoriteStoreList","favoriteStoresArray","s","setTimeout","faStar","favs","filter","App","target","rel","href","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.82717729.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\"\n\n/* Hook for make fetch using cache optionally */\nexport const useFetch = (url, cache ) => {\n\n    /* Hook for maintain the reference of component that invokes this hook */\n    const isMounted = useRef(true);\n\n    /* If the component that invokes this hook is unmounted then change the ref to false*/\n    useEffect(() => {\n        return () => {\n            isMounted.current = false;\n        }\n    }, [])\n\n    const [state, setState] = useState({\n        data: null,\n        loading: true,\n        error: null\n    })\n\n    useEffect( () => {\n        const fetchData = async() =>{\n            let foundCache = false;\n            /* If this hook is invoked with cache in true search in localStorage */\n            if( !!cache ){\n                const cacheUrl = window.localStorage.getItem('cacheUrl');\n                /* Validate if the localstorage has property  */\n                if( cacheUrl !== null ){\n                    const urlArray = JSON.parse(cacheUrl);\n                    const resp = urlArray.find( ({key}) =>  key === url );\n                    /* If previous data is founded set the state with cache data */\n                    if( !!resp ){\n                        setState({\n                            loading: false,\n                            error: null,\n                            data:resp.data\n                        })\n                    foundCache = true;\n                    }\n                }\n            }\n            /* If this hook is invoked with cache in false or does not found in localStorage then fetch in url */\n            if( !foundCache ){\n                try {\n                    const response = await fetch( url );\n                    const data = await response.json();\n                    /*  If the component that invokes this hook is mounted  */\n                    if( isMounted.current ){\n                        /* If for save response data in localStorage */\n                        if( !!cache ){\n                            let urlArray = [];\n                            const obj = { key: url, data: data }\n                            const cacheUrl = window.localStorage.getItem('cacheUrl');\n                            if( cacheUrl !== null ){\n                                urlArray = JSON.parse(cacheUrl);\n                            }\n                            urlArray.push( obj );\n                            localStorage.setItem('cacheUrl', JSON.stringify( urlArray ) );\n                        }\n                        setState({\n                            loading: false,\n                            error: null,\n                            data:data\n                        })\n                    }\n                } catch (err) {\n                    if( isMounted.current ){\n                        console.log('Error in ', url,err);\n                        setState({\n                            loading: false,\n                            error: null,\n                            data:null\n                        })\n                    }\n                }\n                    \n            }\n        }\n        fetchData();\n\n    }, [url,cache]);\n\n    return state;\n\n}\n","import { Marker } from '@react-google-maps/api';\nimport React, { memo, useEffect, useState } from 'react'\nimport { useFetch } from '../../hooks/useFetch'\n\n/** Functional component that reveive a marker Address and transform to LatLng marker */\nexport const MarkerWrapper = memo(({marker,handleClick }) => {\n    const [state, setState] = useState({\n        center:{\n            lat: 19.43224,\n            lng: -99.13350\n      },\n      googleKey:'AIzaSyAmX-kWiHUQ7W3sUDe3viG2xET1q45-QAQ'\n    })\n\n\n    const {center,googleKey} = state;\n    /** Get object with site results that match the provided address */\n    const {loading,data} =useFetch( `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURI(marker.Address)}&key=${googleKey}`,true );\n    /** Set location when the data return from hook */\n    useEffect(() => {\n        if( !!data ){\n            const {status} = data;\n            if( status === 'OK' ){\n                const {results } = data;\n                const {geometry: {location} } =results[0];\n                setState({...setState, center:location});\n            }\n        }\n    }, [loading,data]);\n\n    return (\n        <>\n        { !!data && (\n            <Marker\n                title={ marker.Name}\n                position={center}\n                onClick={ (e) => handleClick(e, marker.Name )}\n            />\n        ) }\n        </>\n    )\n})\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { MarkerWrapper } from './MarkerWrapper';\n\n/*\n* Functional component that makes google Map https://www.npmjs.com/package/google-map-react\n* For more detailed documentation see https://react-google-maps-api-docs.netlify.app/#infowindow\n*/\nexport const CustomMap = ({\n    addFavorite,\n    markerList,\n    mapStyle= { height: \"80vh\", width: \"100%\" },\n    center={ lat: 19.43224, lng: -99.13350\n    },\n    apiKey = 'AIzaSyAmX-kWiHUQ7W3sUDe3viG2xET1q45-QAQ'\n}) => {\n\n\n  const handleClick = ({latLng},texto) =>{\n    const {lat,lng} = latLng;\n    addFavorite(texto,lat(),lng());\n  }\n  \n  return (\n    <>\n      <LoadScript\n        googleMapsApiKey={apiKey}>\n          <GoogleMap\n            mapContainerStyle={mapStyle}\n            zoom={13}\n            center={center}\n          >\n            { !!markerList && markerList.map( marker => {\n              return <MarkerWrapper key={marker.Name} marker={marker} handleClick={handleClick}/>\n            }) }\n            \n          </GoogleMap>\n        \n      </LoadScript>\n    </>\n  )\n}\n\n\n/** Proptypes for the correct functionality */\nCustomMap.propTypes = {\n  addFavorite: PropTypes.func.isRequired,\n  markerList: PropTypes.array.isRequired,\n  mapStyle: PropTypes.object,\n  center: PropTypes.object,\n  apiKey: PropTypes.string\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\n/** Functional component that render a Favorite Store */\nexport const FavItem = ({\n    item,\n    removeFavorite\n}) => {\n    return (\n        <div  className=\"item\" >\n        <FontAwesomeIcon\n            onClick={() => {removeFavorite(item.title)}}\n            icon={faTrash}\n        />\n        <p>{item.title}</p>\n    \n    </div>\n\n    )\n}\n/** Proptypes for the correct functionality */\nFavItem.propTypes = {\n    item: PropTypes.object.isRequired,\n    removeFavorite: PropTypes.func.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { FavItem } from './FavItem'\n\nexport const FavList = ({\n    favorites,\n    removeFavorite,\n    toggleListFavorite,\n    css\n}) => {\n\n    console.log( favorites );\n\n    return (\n        <div className={css}>\n            <button \n                onClick={toggleListFavorite}\n                className=\"btn-close\"\n            > \n                X \n            </button>\n            <h1> My Favorite Stores </h1>\n            { !!favorites && \n                favorites.map( fav => {\n                    return <FavItem \n                        key={fav.title} \n                        item={fav} \n                        removeFavorite={removeFavorite} \n                    />\n                } \n            )}\n        </div>\n    )\n}\n/** Proptypes for the correct functionality */\nFavList.propTypes = {\n    favorites: PropTypes.array.isRequired,\n    removeFavorite: PropTypes.func.isRequired,\n    toggleListFavorite: PropTypes.func.isRequired\n}\n\n\n\n","import React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport { useFetch } from './hooks/useFetch';\nimport {CustomMap} from './map/components/CustomMap';\nimport { FavList } from './map/components/FavList';\n\n/*\n* Use this component as a launching-pad to build your functionality.\n*\n*/\n\nexport const YourComponent = () => {\n\n  const {data} = useFetch( `store_directory.json` );\n  const [state, setState] = useState({\n    markerList:[],\n    favorites: [],\n    openFavorites: false,\n    center:{ lat: 19.43224, lng: -99.13350 }, \n    animateFav: 'fav-icon',\n    renderFavList: false,\n    toasterText: '',\n    toasterClass: 'toaster hidden'\n  })\n  \n  const {markerList,favorites,openFavorites,center,animateFav,renderFavList,toasterText,toasterClass} = state;\n  /* Load List of Favorite Stores (if exists) in the first render  */\n  useEffect(() => {\n    const favoriteStoreList = window.localStorage.getItem('favoriteStoreList');\n    /* Validate if the localstorage has property  */\n    if( favoriteStoreList !== null ){\n        const favoriteStoresArray = JSON.parse(favoriteStoreList);\n        setState( s => ({\n          ...s, \n          favorites: favoriteStoresArray\n        }) )\n    }\n  }, [])\n\n  /* Fill the markerList when the data returns from fetch hook */\n  useEffect(() => {\n    setState( s => ({\n      ...s, \n      markerList: data\n    }) )\n  }, [data])\n\n  /* makes heart beat animation available */\n  useEffect( () => {\n    if( animateFav !== 'fav-icon' ){\n      setTimeout( () => {\n        setState( s => ({\n          ...s,\n          animateFav: 'fav-icon'\n        }))\n      },1000);\n    }\n  },[animateFav])\n\n  /* hide Toaster */\n  useEffect( () => {\n    if( toasterClass !== 'toaster animate__animated animate__fadeOutUp' ){\n      setTimeout( () => {\n        setState( s => ({\n          ...s,\n          toasterClass: 'toaster animate__animated animate__fadeOutUp'\n        }))\n      },2000);\n    }\n  },[toasterClass])\n\n  /* Add a favorite Store to the list of Favorite Stores */\n  const addFavorite = (title,lat,lng) => {\n    const founded = favorites.find( fav =>  fav.title === title );\n    /* Validate thas is not present in the list */\n    if( !founded ){\n      const fav = {title:title, lat:lat , lng:lng };\n      setState({\n        ...state,\n        favorites: [...favorites, fav],\n        animateFav: 'fav-icon animate__heartBeat',\n        toasterText: `${title} added to Favorite list`,\n        toasterClass: 'toaster animate__animated animate__fadeInDown'\n      })\n\n      /* Saves in the localStore for remember the favoriteStores of the user */\n      const favoriteStoreList = window.localStorage.getItem('favoriteStoreList');\n      let favoriteStoresArray = [];\n      /* Validate if the localstorage has property  */\n      if( favoriteStoreList !== null ){\n          favoriteStoresArray = JSON.parse(favoriteStoreList);\n      }\n      favoriteStoresArray.push( fav );\n      window.localStorage.setItem('favoriteStoreList', JSON.stringify( favoriteStoresArray ) );\n\n    }else{\n      setState({\n        ...state,\n        animateFav: 'fav-icon animate__heartBeat',\n        toasterText: `${title} is actually in Favorite list`,\n        toasterClass: 'toaster animate__animated animate__fadeInDown'\n\n      })\n    }\n  \n  }\n\n  const removeFavorite = (title) => {\n    const favs = favorites.filter( fav => { return fav.title !== title } )\n    setState({\n      ...state,\n      favorites: favs\n    })\n    window.localStorage.setItem('favoriteStoreList', JSON.stringify( favs ) );\n\n  }\n\n  /** Open or close Favorite Stores section */\n  const toggleListFavorite = () =>{\n    setState({\n      ...state,\n      openFavorites: !openFavorites,\n      renderFavList: true\n    })\n  }\n\n\n  return (\n    <div className=\"your-component\">\n      <h1> Put your solution here!</h1>\n\n      <div className=\"map-wrapper\">\n        <CustomMap \n          addFavorite={addFavorite} \n          markerList={markerList} \n          center={center}\n        />\n        <div className={toasterClass}> {toasterText} </div>  \n        {\n          !!favorites && (\n            <div className={animateFav} onClick={toggleListFavorite}>\n              <FontAwesomeIcon icon={faStar} />\n            </div>\n          )\n        }\n        { renderFavList && (\n          <FavList \n            favorites={favorites}\n            removeFavorite={removeFavorite} \n            toggleListFavorite={toggleListFavorite}\n            css={ openFavorites ? 'fav-list animate__animated  animate__backInRight': 'fav-list animate__animated  animate__backOutRight' }\n          />\n        )\n\n        }\n      </div>\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { YourComponent } from './YourComponent';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Hi, Welcome to the Digital Generation Code Challenge!</h1>\n        <h3>Intro:</h3>\n\n        <p>At Generation, we have many users: students, teachers, employers, and the core Generation team.</p>\n        <p>Everything we do at Generation is centered around better serving the needs of these users. </p>\n        <p>In your role, you'll be using your ninja JavaScript skills to empower Generation to better serve these users.</p>\n        <p>That's why we've included this piece in the recruiting process. It gives you an opportunity to demonstrate your creative problem-solving, user-centric design, and coding style. </p>\n        <h3> Here's how it works:</h3>\n        <p></p>\n\n        <p>Below are some real-life <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/User_story\">user stories</a> that we face at Generation.</p>\n        <p>We'd love to see how you use JS and React to address these user stories.</p>\n        <p>Feel free to add libraries, create new components, or otherwise change the codebase. This app is yours!</p>\n        <p>If you're having trouble, don't be afraid to ask for help!</p>\n\n        <strong>Student user stories:</strong>\n        <ul>\n          <li>As a student, I want to see a map of <b>Mexico City</b></li>\n          <li>As a student, I want to see a map that has <b>all the stores</b> represented as <b>markers/pins</b> on the map. (<a target=\"_blank\"  rel=\"noopener noreferrer\" href=\"https://developers.google.com/maps/documentation/javascript/examples/marker-simple\">What a google maps marker is?</a>)</li>\n          <li>As a student, I want to be able to click on a store marker and add it to a list of <b>'My Favorite Stores'</b></li>\n          <li>As a student, I want to be able to click on a store in the <b>'My Favorite Stores'</b> and remove if from the list</li>\n        </ul>\n\n        <strong>Helpful tips:</strong>\n        <ul>\n          <li>Feel free to use our Google Maps API key: <b>AIzaSyCVH8e45o3d-5qmykzdhGKd1-3xYua5D2A</b></li>\n          <li>The list of stores is located in the file <b>store_directory.json</b> </li>\n          <li><b>Focus on the user, not the technology.</b> A simple implementation that impresses the user is better than a super technical solution that impresses other developers.</li>\n          <li>That said, code that is easy to follow is always appreciated ():</li>\n        </ul>\n\n        <YourComponent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}